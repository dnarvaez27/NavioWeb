{"version":3,"sources":["Navio/Navio.jsx","Fetcher/Counter/Counter.jsx","Fetcher/Fetcher.jsx","Sidebar/Sidebar.jsx","settings.js","App.jsx","serviceWorker.js","index.js"],"names":["Navio","props","nRef","React","createRef","this","nv","navio","current","data","addAllAttribs","ref","Component","Counter","state","count","dataSize","setState","Fetcher","counterRef","url","a","offset","extract","limit","fetch","req","json","currentData","page","doExtract","Promise","resolve","reject","setTimeout","Array","isArray","JSON","stringify","updateCount","length","Error","console","error","onFetchDone","id","Sidebar","open","urls","ts","pad","num","len","toString","join","d","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","goToUrl","prevState","timestamp","getTime","onClick","className","sort","b","map","u","i","key","dateToString","App","useState","setData","undefined","setUrl","show","text","toast","setToast","input","value","fetchRef","sidebarRef","useEffect","update","saveUrl","method","headers","Accept","body","sendRequest","addUrl","onChange","e","target","onKeyPress","r","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9fb16ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport navio from 'navio';\r\nimport './navio.css';\r\n\r\nexport default class Navio extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.nRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.nv = navio(this.nRef.current);\r\n  }\r\n\r\n  componentDidUpdate () {\r\n    this.nv.data(this.props.data);\r\n    this.nv.addAllAttribs();\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div ref={this.nRef}></div>\r\n    );\r\n  }\r\n}\r\n\r\nNavio.propTypes = {\r\n  data: PropTypes.any.isRequired\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './counter.css';\r\n\r\nexport default class Counter extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = { count: 0, dataSize: 0 };\r\n  }\r\n\r\n  updateCount (count, dataSize) {\r\n    this.setState({ count, dataSize });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <span>{`Loaded ${this.state.count} Pages`}</span>\r\n        <span>{`We have reached ${this.state.dataSize} entries`}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCounter.propTypes = {\r\n  limit: PropTypes.number.isRequired\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Counter from './Counter/Counter';\r\n\r\nconst limit = 1000;\r\n\r\nexport default class Fetcher extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.counterRef = React.createRef();\r\n  }\r\n\r\n  update (url) {\r\n    (async () => {\r\n      let offset = 0;\r\n      const extract = async (limit, offset) => {\r\n        const req = await fetch(`${url}?$limit=${limit}&$offset=${offset}`);\r\n        const data = await req.json();\r\n        return data;\r\n      };\r\n      let data = [];\r\n      let currentData = [0];\r\n      let page = 1;\r\n\r\n      const doExtract = () => {\r\n        return new Promise((resolve, reject) => {\r\n          setTimeout(async () => {\r\n            currentData = await extract(limit, offset);\r\n            if (Array.isArray(currentData)) {\r\n              if (JSON.stringify(currentData) === JSON.stringify(data)) {\r\n                currentData = [];\r\n              }\r\n              // eslint-disable-next-line require-atomic-updates\r\n              offset += limit;\r\n              data = [...data, ...currentData];\r\n              this.counterRef.current.updateCount(page++, data.length);\r\n              resolve();\r\n            } else {\r\n              reject(new Error('Data is not array'));\r\n            }\r\n          }, 100);\r\n        });\r\n      };\r\n\r\n      while (currentData.length !== 0) {\r\n        try {\r\n          await doExtract();\r\n        } catch (error) {\r\n          console.error(error);\r\n          break;\r\n        }\r\n      }\r\n      this.props.onFetchDone(true, data);\r\n    })();\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"fetcher\">\r\n        <Counter ref={this.counterRef} limit={limit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFetcher.propTypes = {\r\n  onFetchDone: PropTypes.func.isRequired,\r\n  url: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './sidebar.css';\r\nimport { API } from '../settings';\r\n\r\nexport default class Sidebar extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = { open: false, urls: [] };\r\n  }\r\n\r\n  componentDidMount () {\r\n    (async () => {\r\n      const req = await fetch(`${API}/api/urls`);\r\n      const data = await req.json();\r\n\r\n      this.setState({ urls: data });\r\n    })();\r\n  }\r\n\r\n  dateToString (ts) {\r\n    const pad = (num, len) => {\r\n      return Array(len + 1 - num.toString().length).join('0') + num;\r\n    };\r\n    const d = new Date(ts);\r\n    return `${d.getFullYear()}-${pad(d.getMonth(), 2)}-${pad(d.getDate(), 2)} ${pad(d.getHours(), 2)}:${pad(d.getMinutes(), 2)}:${pad(d.getSeconds(), 2)}`;\r\n  }\r\n\r\n  goToUrl (url) {\r\n    return () => {\r\n      this.props.goToUrl(url)();\r\n      this.setState((prevState) => {\r\n        return { open: false, urls: [{ url, timestamp: new Date().getTime() }, ...prevState.urls] };\r\n      });\r\n    };\r\n  }\r\n\r\n  addUrl (url) {\r\n    this.setState((prevState) => {\r\n      return { urls: [{ url, timestamp: new Date().getTime() }, ...prevState.urls] };\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        <button id=\"sidebar-opener\" onClick={() => this.setState({ open: true })}>\r\n          <i className=\"fas fa-bars\"></i>\r\n        </button>\r\n        <div id=\"sidebar\" className={this.state.open ? '' : 'hidden'}>\r\n          <button onClick={() => this.setState({ open: false })}>\r\n            <i className=\"fas fa-times\"></i>\r\n          </button>\r\n          <div id=\"urls-container\">\r\n            {this.state.urls.sort((a, b) => b.timestamp - a.timestamp).map((u, i) => (\r\n              <div className=\"url-item\" onClick={this.goToUrl(u.url)} key={i}>\r\n                <span>{u.url}</span>\r\n                <span>{this.dateToString(u.timestamp)}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nSidebar.propTypes = {\r\n  goToUrl: PropTypes.func.isRequired\r\n};\r\n","export const API = '';\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navio from './Navio/Navio';\nimport Fetcher from './Fetcher/Fetcher';\nimport Sidebar from './Sidebar/Sidebar';\nimport { API } from './settings';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [url, setUrl] = useState(undefined);\n  const [toast, setToast] = useState({ show: false, text: '' });\n\n  const input = { ref: React.createRef, value: '' };\n  const fetchRef = React.createRef();\n  let sidebarRef = React.createRef();\n\n  useEffect(() => {\n    if (fetchRef.current) {\n      fetchRef.current.update(url);\n    }\n  }, [fetchRef, url]);\n\n  useEffect(() => {\n    if (toast.show) {\n      setTimeout(() => setToast({ show: false, text: toast.text }), 2000);\n    }\n  }, [toast]);\n\n  const saveUrl = (url) => {\n    (async () => {\n      await fetch(`${API}/api/urls`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ url: url, timestamp: new Date().getTime() })\n      });\n    })();\n  };\n  const onFetchDone = (state, data) => {\n    setUrl(undefined);\n    setData(data);\n  };\n  const sendRequest = (addUrl = false) => {\n    if (input.value) {\n      setData(undefined);\n      setUrl(input.value);\n      saveUrl(input.value);\n      if (addUrl) {\n        sidebarRef.addUrl(input.value);\n      }\n    } else {\n      setToast({ show: true, text: 'No URL typed' });\n    }\n  };\n\n  const goToUrl = (url) => {\n    return () => {\n      input.value = url;\n      sendRequest();\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Navio URL Dataset explorer</h1>\n      <div id=\"header\">\n        <input\n          ref={input.ref}\n          onChange={e => (input.value = e.target.value)}\n          onKeyPress={(e) => (e.key === 'Enter') && sendRequest()}\n          id=\"url-input\"\n        />\n        <button onClick={() => { sendRequest(true); }}>Send</button>\n      </div>\n      <Sidebar goToUrl={goToUrl} ref={r => (sidebarRef = r)} />\n      {url\n        ? <Fetcher onFetchDone={onFetchDone} url={url} ref={fetchRef} />\n        : (data && data.length) !== 0\n          ? <Navio data={data} />\n          : <div id=\"info-empty\">\n            <span>Enter a Dataset URL to visualize and explore it!</span>\n          </div>\n      }\n      <div id=\"toast\" className={toast.show ? 'shown' : ''}>{toast.text}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}